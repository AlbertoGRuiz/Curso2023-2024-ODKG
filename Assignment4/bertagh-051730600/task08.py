# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YraQ9cYYnFkUFouoTxfdOkVSuGry30vH

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

ns = Namespace("http://data.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")

from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF, RDFS

#With this query we find out which of the required properties are missing for each individual.

q1 = prepareQuery('''
   SELECT ?Subject ?Property WHERE {
    ?Subject ?Property ?value.
    ?Subject RDF:type ns:Person.
    }
  ''',
  initNs = {"RDF": RDF,
            "ns":ns}
)
#Visualize the results

for r in g1.query(q1):
  print(r.Subject, r.Property)


#Fill missing values in g1 with the values in g2

properties=['Given','Family','EMAIL']

for person in g1.subjects(RDF.type, ns.Person):
    for p in properties:
        # Check if property is already in g1
        if not (person, VCARD[p], None) in g1:
            # If it isn't, get it from g2
            value_from_g2 = g2.value(person, VCARD[p], None)
            
            # Add the value from g2 to g1
            if value_from_g2 is not None:
                g1.add((person, VCARD[p], value_from_g2))


from rdflib.plugins.sparql import prepareQuery
from rdflib.namespace import RDF, RDFS

#We check g1 again to see that now we have every property we needed, and that the values are correct.

q1 = prepareQuery('''
   SELECT ?Subject ?Property ?value WHERE {
    ?Subject ?Property ?value.
    ?Subject RDF:type ns:Person.
    }
  ''',
  initNs = {"RDF": RDF,
            "ns":ns}
)
#Visualize the results

for r in g1.query(q1):
  print(r.Subject, r.Property, r.value)
