# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16aYw2N0UkJNR79_5lmdTteroApSHHXeq

**Task 07: Querying RDF(s)**
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
  SELECT ?subclass
  WHERE {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = {"rdfs": RDFS, "ns": Namespace("http://somewhere#")}
)

# Visualize the results
print("RDFLib")
for s, p, o in g.triples((None, RDFS.subClassOf, Namespace("http://somewhere#").LivingThing)):
  print(s)

print("SPARQL")
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
  SELECT ?individual
  WHERE {
    { ?individual rdf:type ns:Person. }
    UNION
    { ?individual rdf:type ?subclass.
      ?subclass rdfs:subClassOf ns:Person. }
  }
  ''',
  initNs = {"rdf": RDF, "rdfs": RDFS, "ns": Namespace("http://somewhere#")}
)

# Visualize the results
print("RDFLib")
for s, p, o in g.triples((None, RDF.type, Namespace("http://somewhere#").Person)):
  print(s)

for s, p, o in g.triples((None, RDFS.subClassOf, Namespace("http://somewhere#").Person)):
  for a, b, c in g.triples((None, RDF.type, s)):
    print(a)

print("SPARQL")
for r in g.query(q2):
  print(r.individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individual ?property ?value
  WHERE {
    { ?individual rdf:type ns:Person. }
    UNION
    { ?individual rdf:type ns:Animal. }
    ?individual ?property ?value.
  }
  ''',
  initNs = {"rdf": RDF, "ns": Namespace("http://somewhere#")}
)

# Visualize the results
print("RDFLib")
for s, p, o in g.triples((None, RDF.type, Namespace("http://somewhere#").Person)):
  for a, b, c in g.triples((s, None, None)):
    print(a,b,c)

for s, p, o in g.triples((None, RDF.type, Namespace("http://somewhere#").Animal)):
  for a, b, c in g.triples((s, None, None)):
    print(a,b,c)

print("SPARQL")
for r in g.query(q3):
  print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
q4 = prepareQuery('''
  SELECT ?name
  WHERE {
    ?person vcard:FN ?name.
    ?person foaf:knows ns:RockySmith.
  }
  ''',
  initNs = {"vcard": Namespace("http://www.w3.org/2001/vcard-rdf/3.0/"), "foaf": Namespace("http://xmlns.com/foaf/0.1/"), "ns": Namespace("http://somewhere#")}
)

# Visualize the results
for r in g.query(q4):
    print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery('''
  SELECT ?entity
  WHERE {
    ?entity foaf:knows ?known1.
    ?entity foaf:knows ?known2.
    FILTER(?known1 != ?known2)
  }
  GROUP BY ?entity
  HAVING (COUNT(?entity) >= 2)
  ''',
  initNs = {"foaf": Namespace("http://xmlns.com/foaf/0.1/")}
)

# Visualize the results
for r in g.query(q5):
    print(r)