# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2rb4oAelpkSwFPOgTeENBmfSN8pD2Wz

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

# Definir espacios de nombres
ns1 = Namespace("http://example.org/graph1#")
ns2 = Namespace("http://example.org/graph2#")
ns3 = Namespace("http://example.org/graph3#")

# Consulta SPARQL para buscar individuos con el mismo apodo y nombre de familia en g1 y g2
query = """
    SELECT ?ind1 ?ind2
    WHERE {
        ?ind1 rdf:type ns1:Person .
        ?ind2 rdf:type ns2:Person .
        ?ind1 ns1:hasGivenName ?givenName1 .
        ?ind2 ns2:hasGivenName ?givenName2 .
        ?ind1 ns1:hasFamilyName ?familyName1 .
        ?ind2 ns2:hasFamilyName ?familyName2 .
        FILTER (?givenName1 = ?givenName2 && ?familyName1 = ?familyName2)
    }
"""

results = g1.query(query, initNs={"rdf": RDF, "ns1": ns1, "ns2": ns2})

# Iterar a través de las coincidencias y agregarlas a g3 con OWL:sameAs
for row in results:
    ind1 = row.ind1
    ind2 = row.ind2

    g3.add((ind1, OWL.sameAs, ind2))

# Guardar el tercer grafo en un archivo (opcional)
g3.serialize("output.rdf", format="xml")





