# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ek7hbPF2Ql43fyKZzGCeC8qOJ--h3kai

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")
ns = Namespace("http://somewhere#")
VCARD = Namespace("http://www.w3.org./2001/vcard-rdf/3.0#")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

print("RDFLib:")
for s,p,o in g.triples((None, RDFS.subClassOf,ns.LivingThing)):
  print(s)
print("SPARQL:")

q1 = prepareQuery('''
    SELECT ?x WHERE {
      ?x rdfs:subClassOf ns:LivingThing.
    }
''', initNs = {"rdfs":RDFS, "ns" : ns}
)

for r in g.query(q1):
  print(r, r.x)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

print("RDFLib:")

subclasses = []
for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person)):
  subclasses.append(s)
subclasses.append(ns.Person)

for object in subclasses:
  for s,p,o in g.triples((None, RDF.type,object)):
    print(s)
print("SPARQL:")
q1 = prepareQuery('''
  SELECT ?x WHERE {
    {
        ?x a ns:Person.
    }
    UNION {
    ?class rdfs:subClassOf ns:Person.
    ?x a ?class.
    }
  }
  ''',
  initNs = {
      "rdfs": RDFS, "ns": ns}
)

for r in g.query(q1):
  print(r.x)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

print("RDFLib:")
subclasses = [ns.Person, ns.Animal]

for object in subclasses:
    for s,p,o in g.triples((None, RDF.type, object)):
      print("Individual: ", end="")
      print(s)
      print("Class type: ", end="")
      print(object)
      for s1,p1,o1 in g.triples((s, None, None)):
         print("- Property: ", end="")
         print(p1)

print()
print("SPARQL:")
q1 = prepareQuery('''
  SELECT ?individual ?property ?value WHERE {
    {
      ?individual a ns:Person.
    }
    UNION
    {
      ?individual a ns:Animal.
    }
    ?individual ?property ?value.
  }
  ''',
  initNs = { "ns": ns}
)

for r in g.query(q1):
  print(f"Individual: {r.individual} - Property: {r.property} - Value: {r.value}")

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

print("RDFLib:")

subclasses = [s for s,p,o in g.triples((None, RDFS.subClassOf, ns.Person))]
subclasses.append(ns.Person)

for object in subclasses:
    for s,p,o in g.triples((None, RDF.type, object)):
       for s1,p1,o1 in g.triples((s, FOAF.knows, ns.RockySmith)):
          print(f"Individual: {s}")

print()

print("SPARQL:")

q1 = prepareQuery('''
  SELECT ?x WHERE {
    {
        ?x a ns:Person.
    }
    UNION {
    ?class rdfs:subClassOf ns:Person.
    ?x a ?class.
    }
    ?x foaf:knows ns:RockySmith.
  }
  ''',
  initNs = { "rdfs": RDFS, "ns": ns, "foaf": FOAF}
)

for r in g.query(q1):
  print(f"Individual: {r.x}")

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

print("RDFlib:")

entities = [s for s,p,o in g.triples((None, FOAF.knows, None))]
checked = []
for entity in entities:
   if entity not in checked and entities.count(entity) >= 2:
        print(f"Individual: {entity}")
        checked.append(entity)

print("SPARQL:")

q1 = prepareQuery('''
  SELECT ?x WHERE {
    {
        ?x foaf:knows ?o1.
        ?x foaf:knows ?o2.
        FILTER (?o1 != ?o2)
    }
  }
  GROUP BY ?x
  ''',
  initNs = { "foaf":FOAF }
)

for r in g.query(q1):
  print(f"Individual: {r.x}")

