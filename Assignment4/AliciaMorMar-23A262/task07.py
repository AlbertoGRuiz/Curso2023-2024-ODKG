# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aRX3jDQUeY7isdiRKAPmxIQ_F_8wvCJ6

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
NS = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?subclass WHERE {
    ?subclass rdfs:subClassOf* ns:LivingThing.
  }
  ''',
  initNs = {"rdfs":RDFS, "ns":NS}
)

# Visualize the results
for r in g.query(q1):
  print(r.subclass)

print(g.serialize(format="ttl"))

for subject, _, _ in g.triples((None, RDFS.subClassOf*"*", NS.LivingThing)):
    print(subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
q2 = prepareQuery('''
    SELECT ?individual WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person.
    }
    ''',
    initNs={"rdf": RDF,"rdfs": RDFS, "ns": NS}
)

# Visualize the results
for r in g.query(q2):
  print(r.individual)

for subjectType, _, _ in g.triples((None, RDFS.subClassOf*"*", NS.Person)):
   for subject, _, _ in g.triples((None, RDF.type, subjectType)):
      print(subject)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
q3 = prepareQuery('''
  SELECT ?individual ?prop ?clas
    WHERE {
        {
        ?individual rdf:type ns:Person .
        }
        UNION
        {
        ?individual rdf:type ns:Animal.
        }
        ?individual ?prop ?clas
    }
  ''',
  initNs = {"ns": NS , "rdf": RDF}

)

# Visualize the results
for r in g.query(q3):
  print(r.individual, r.prop, r.clas)

for individual, _, _ in g.triples((None, RDF.type, NS.Person)):
    print(individual)
for individual, property, _ in g.triples((None, None, NS.Animal)):
    print(individual)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0")
from rdflib.namespace import FOAF

q4 = prepareQuery('''
    SELECT ?value
    WHERE {
        ?individual rdf:type/rdfs:subClassOf* ns:Person.
        ?individual foaf:knows ns:RockySmith .
        ?individual vcard:FN ?value.
    }
    ''',
    initNs = {"rdf": RDF,"rdfs": RDFS, 'ns': NS, 'foaf': FOAF, 'vcard': VCARD}
)

# Visualize the results
for r in g.query(q4):
     print(r.value)

for individual, _, _ in g.triples((None, FOAF.knows, NS.RockySmith)):
  for _, _, name in g.triples((individual, VCARD.FN, None)):
    print(name)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery('''
  SELECT DISTINCT ?entity  WHERE
  {
    ?entity foaf:knows ?person.
    FILTER(?entity != ?person).
  }
  GROUP BY ?entity
  HAVING (COUNT(DISTINCT ?person) >= 2)
  ''',
  initNs = {"foaf":FOAF}
)

# Visualize the results
for r in g.query(q5):
  print(r.entity)

entity_counts = {}

for subject, _, _ in g.triples((None, FOAF.knows, None)):
    if subject in entity_counts:
        entity_counts[subject] += 1
    else:
        entity_counts[subject] = 1

entities_with_at_least_two_knows = [entity for entity, count in entity_counts.items() if count >= 2]
for entity in entities_with_at_least_two_knows:
    print(entity)