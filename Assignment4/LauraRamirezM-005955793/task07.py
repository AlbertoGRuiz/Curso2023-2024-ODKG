# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E_EJtv2DVYLx83JsIjGbqy9CCbMbRLD5

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

# TO DO in RDFLib
print("RDFLib")
subclasses_rdflib = []
def find_subclasses(target_class):
    for s, p, o in g.triples((None, RDFS.subClassOf, target_class)):
        subclasses_rdflib.append(s)
        find_subclasses(s)
find_subclasses(ns.LivingThing)
# Visualize the results
for s in subclasses_rdflib:
  print(s)
    
# TO DO in SPARQL
print("SPARQL")
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject RDFS:subClassOf/RDFS:subClassOf* ns:LivingThing.
  }
  ''',
  initNs = {"RDFS": RDFS, "ns": ns}
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO

# TO DO in RDFLib
print("RDFLib")
for s,p,o in g.triples((None, RDF.type, ns.Person)):
    print(s)
for subclass in g.triples((None, RDFS.subClassOf, ns.Person)):
    for individual in g.triples((None, RDF.type, subclass[0])):
        print(individual[0])
    
# TO DO in SPARQL
print("SPARQL")
q2 = prepareQuery('''
   SELECT  ?Subject ?Individual  WHERE {
    ?Subject RDFS:subClassOf* ns:Person.
    ?Individual RDF:type ?Subject.
  }
  ''',
  initNs = { "RDFS": RDFS,
            "RDF": RDF,
             "ns":ns}
)
#Visualize the results

for r in g.query(q2):
  print(r.Individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO

# TO DO in RDFLib
print("RDFLib")

lst = []
lst.append(ns.Person)
lst.append(ns.Animal)

for elem in lst:
    for s, _, _ in g.triples((None, RDF.type, elem)):
        for _, p, _ in g.triples((s, None, None)):
            print(s, p)


# TO DO in SPARQL
print("SPARQL")
q3 = prepareQuery('''
   SELECT  ?Individual ?property WHERE {
    ?Individual ?property ?value
    {
    ?Subject RDFS:subClassOf ns:Person.
  ?Individual RDF:type ?Subject.
  }  UNION {
    ?Subject RDFS:subClassOf* ns:Animal.
  ?Individual RDF:type ?Subject.
  }}
  ''',
  initNs = { "RDFS": RDFS,
            "RDF": RDF,
             "ns":ns}
)
#Visualize the results

for r in g.query(q3):
  print((r.Individual),(r.property))

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")
from rdflib import XSD

# TO DO
q4 = prepareQuery('''
  SELECT  ?Given WHERE {
    ?Subject foaf:knows ?RockySmith;
             vcard:Given ?Given.
  ?RockySmith vcard:FN ?RockySmithFullName.
  }
  ''',
  initNs = { "foaf": FOAF, "vcard": VCARD, "xsd":XSD}
)
#Visualize the results
for r in g.query(q4, initBindings = {'?RockySmithFullName' : Literal('Rocky Smith', datatype=XSD.string)}):
  print(r.Given)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
q5 = prepareQuery('''
  SELECT DISTINCT ?Subject ?Given  WHERE {
    ?Subject foaf:knows ?entity1.
    ?Subject foaf:knows ?entity2.
    ?Subject vcard:Given ?Name.
    FILTER (?entity1 != ?entity2)
  }
  ''',
  initNs = { "foaf": FOAF, "vcard": VCARD}
)

# Visualize the results
for r in g.query(q5):
  print(r.Subject)
