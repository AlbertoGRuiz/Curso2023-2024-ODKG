# -*- coding: utf-8 -*-
"""Task09.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MqeXCBngsL9wntFLeehSGl0g3mWsWP1W

**Task 09: Data linking**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials/"

from rdflib import Graph, Namespace, Literal, URIRef
g1 = Graph()
g2 = Graph()
g3 = Graph()
g1.parse(github_storage+"rdf/data03.rdf", format="xml")
g2.parse(github_storage+"rdf/data04.rdf", format="xml")

"""Busca individuos en los dos grafos y enlázalos mediante la propiedad OWL:sameAs, inserta estas coincidencias en g3. Consideramos dos individuos iguales si tienen el mismo apodo y nombre de familia. Ten en cuenta que las URI no tienen por qué ser iguales para un mismo individuo en los dos grafos."""

NS1 = Namespace("http://data.three.org#")
NS2 = Namespace("http://data.four.org#")
VCARD = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
from rdflib.namespace import RDF, RDFS, OWL
from rdflib.plugins.sparql import prepareQuery

# Find elements of Person class (graph 1)
q1 = prepareQuery('''
  SELECT ?s WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?s rdf:type ?class
  }
  ''', initNs = {"ns":NS1, "rdfs":RDFS}
)

# Find elements of Person class (graph 2)
q2 = prepareQuery('''
  SELECT ?s WHERE {
    ?class rdfs:subClassOf* ns:Person .
    ?s rdf:type ?class
  }
  ''', initNs = {"ns":NS2,"rdfs":RDFS}
)

# For each person in graph 1, find given and family name
for r1 in g1.query(q1):
  given_g1 = g1.value(subject=r1.s, predicate=VCARD.Given, object=None)
  family_g1 = g1.value(subject=r1.s, predicate=VCARD.Family, object=None)
  if given_g1 != None and family_g1 != None:
    # Iterate people in graph 2, and find their given and family name
    for r2 in g2.query(q2):
      given_g2 = g2.value(subject=r2.s, predicate=VCARD.Given, object=None)
      family_g2 = g2.value(subject=r2.s, predicate=VCARD.Family, object=None)
      # If given and family names coincide, add to graph 3
      if given_g1 == given_g2 and family_g1 == family_g2:
        g3.add((r1.s, OWL.sameAs, r2.s))

print("Graph 3:")
for s, p, o in g3.triples((None, None, None)):
  print(s, p, o)