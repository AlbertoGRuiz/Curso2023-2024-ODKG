# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zOU0aneXtKeLi3WxqPnpZ9EnYzyvHZfh

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
    select ?subclass
    where {
        ?subclass rdfs:subClassOf ns:LivingThing.
    }
    ''',
     initNs={"rdfs": RDFS, "ns": ns}             )

for r in g.query(q1):
 print(r)

print(g.serialize(format="ttl"))

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery('''
    select ?individual
    where {
        ?individual rdf:type/rdfs:subClassOf* ns:Person.

    }
    ''',
     initNs={"rdf": RDF,"rdfs": RDFS, "ns": ns}             )

for r in g.query(q1):
 print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery(
    '''
    SELECT ?individual ?property ?value ?class
    WHERE {
        ?individual rdf:type ?class .
        ?individual ?property ?value
        FILTER(?class = ns:Person || ?class = ns:Animal)
    }
    ''',
    initNs={"rdf": RDF, "ns": ns}
)

for r in g.query(q1):
 print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0")
foaf = Namespace("http://xmlns.com/foaf/0.1/")
from rdflib.plugins.sparql import prepareQuery
from rdflib import FOAF

q1 = prepareQuery(
    '''
    SELECT ?individual ?property ?value
    WHERE {
        ?individual foaf:knows ns:RockySmith .
        ?individual vcard:FN ?value
    }
    ''',
    initNs={"foaf": FOAF, "ns": ns, "vcard": vcard}
)

for r in g.query(q1):
 print(r)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
ns = Namespace("http://somewhere#")
from rdflib.plugins.sparql import prepareQuery

q1 = prepareQuery(
    '''
    SELECT distinct ?individual
    WHERE {
        ?individual foaf:knows ?people1 .
        ?individual foaf:knows ?people2 .
        FILTER(?people1 != ?people2)
    }
    ''',
    initNs={"foaf": FOAF}
)

for r in g.query(q1):
 print(r)