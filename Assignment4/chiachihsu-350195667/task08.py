# -*- coding: utf-8 -*-
"""Task08.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y1k6oOW5QVMp9_M0jcJctZRQM4FTLWrd

**Task 08: Completing missing data**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2021-2022/master/Assignment4/course_materials"

from rdflib import Graph, Namespace, Literal, URIRef
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g1 = Graph()
g2 = Graph()
g1.parse(github_storage+"/rdf/data01.rdf", format="xml")
g2.parse(github_storage+"/rdf/data02.rdf", format="xml")

"""Tarea: lista todos los elementos de la clase Person en el primer grafo (data01.rdf) y completa los campos (given name, family name y email) que puedan faltar con los datos del segundo grafo (data02.rdf). Puedes usar consultas SPARQL o iterar el grafo, o ambas cosas."""

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
data = Namespace('http://data.org#')

q1 = prepareQuery('''
    select ?Person ?Property ?Value
    where {
        ?Person rdf:type <http://data.org#Person>.
        ?Person ?Property ?Value
    }''',
)

for r in g1.query(q1):
 print(r)

#print(g1.serialize(format="ttl"))

for p1 in g1.subjects(RDF.type, data.Person):
    p = [vcard.Given, vcard.Family, vcard.EMAIL]

    for prop in p:
        if not (p1, prop, None) in g1:
            o2 = g2.value(p1,prop)
            if o2:
                g1.add((p1, prop, o2))

# Print the updated RDF graph (g1) with completed fields
print(g1.serialize(format="ttl"))