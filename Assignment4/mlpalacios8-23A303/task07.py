# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oW2SAc6jJST0mFjVmBbyBVeo5IHuPVIh

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

# Solo para visualizar los datos
for s,p,o in g:
  print(s,p,o)

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
# Visualize the results
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
owl = Namespace("http://www.w3.org/2002/07/owl#")
foaf = Namespace("http://xmlns.com/foaf/0.1/")

q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject rdfs:subClassOf* ns:LivingThing
  }
  ''',
  initNs = { "vcard": vcard, "ns": ns}
)

for r in g.query(q1):
 print(r)

#with RDFLib

# for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
#   print(s)
def getListOfSubclasses(Object, list=None):
    if list is None:
        list = set()

    for s, p, o in g.triples((None, RDFS.subClassOf, Object)):
        list.add(s)
        getListOfSubclasses(s, list)

    return list

for subclass in getListOfSubclasses(ns.LivingThing):
    print(subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
# Visualize the results
q2 = prepareQuery('''
  SELECT ?Subject
  WHERE  {
    {
    ?Subject rdf:type ns:Person
    } UNION {
     ?Subject1 rdfs:subClassOf ns:Person.
     ?Subject rdf:type ?Subject1
    }
  }
  ''',
  initNs = { "vcard": vcard, "ns": ns}
)
for r in g.query(q2):
 print(r)

#with RDFLib
emptyList = set()
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  emptyList.add(s)
for s, p, o in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s1, p1, o1 in g.triples((None, RDF.type, s)):
    emptyList.add(s1)
for object in emptyList:
  print(object)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
# Visualize the results
q3 = prepareQuery('''
  SELECT ?Subject ?property ?value WHERE {
      ?Subject rdf:type ?o.
      ?Subject ?property ?value.
      FILTER (?o = ns:Person || ?o = ns:Animal).
  }
  ''',
  initNs = { "vcard": vcard, "ns": ns}
)

for r in g.query(q3):
 print(r)

#withRDFLib
listaSubject = set()
listaFinal = list()
for s, p, o in g.triples((None, RDF.type, None)):
  if (o == ns.Person or o == ns.Animal):
    listaSubject.add(s)
# for subject in listaSubject:
#   print(subject)
for subject in listaSubject:
  for s, p, o in g.triples((subject, None, None)):
    listaFinal.append(s+p+o)
    # listaFinal.append(p)
    # listaFinal.append(o)
for item in listaFinal:
  print(item)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
# Visualize the results

qNames = prepareQuery('''
  SELECT ?Name WHERE {
      ?Subject <http://www.w3.org/2001/vcard-rdf/3.0/FN> ?Name.
      ?Subject <http://xmlns.com/foaf/0.1/knows> ns:RockySmith
  }
  ''',
  initNs = {"vcard": vcard, "ns": ns, "foaf": foaf}
)

for r in g.query(qNames):
 print(r)

#WithRDFLib
#Profesor, no entiendo por quÃ© me imprime None en vez de imprimir el full name

listaPersona = set()
for s,p,o in g.triples((None, foaf.knows, ns.RockySmith)):
  listaPersona.add(s)
for item in listaPersona:
  print(item)
for persona in listaPersona:
    print(g.value(subject=persona, predicate=vcard.FN))

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
# Visualize the results
qEntity = prepareQuery("""

SELECT ?entity
WHERE {
  ?entity foaf:knows ?otherEntity.
}
GROUP BY ?entity
HAVING (COUNT(?otherEntity) >= 2)
""", initNs = {"vcard": vcard, "ns": ns, "foaf": foaf})

for entity in g.query(qEntity):
  print(entity)

#withRDFLib
from collections import defaultdict
counter = defaultdict(int)

for s, p, o in g.triples((None, foaf.knows, None)):
  counter[s] += 1
for entity, count in counter.items():
  if count >=2:
    print (entity)