# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yPniC8cCIRK0ofpUQK_h0bcNOa4CroCF

**Task 07: Querying RDF(s)**
"""

# !pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS, FOAF
from rdflib.plugins.sparql import prepareQuery

g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0/"), override=False)
g.parse(github_storage + "/rdf/example6.rdf", format="xml")

ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

q1 = prepareQuery(
    """
    SELECT ?subclass WHERE {
        ?subclass rdfs:subClassOf ns:LivingThing
    }
    """, initNs={"rdfs": RDFS, "ns": ns}
)

# Visualize the results
for r in g.query(q1):
  print(r)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**"""

q2 = prepareQuery("""
    SELECT ?individual WHERE {
        {?individual a/rdfs:subClassOf* ns:Person.}
        UNION
        {?individual rdf:type ?type.
        ?type rdf:type ns:person.}
    }
    """, initNs={"rdfs": RDFS, "ns": ns,"rdf": RDF}
)
# Visualize the results
for r in g.query(q2):
  print(r)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**"""

q3 = prepareQuery("""
    SELECT ?individual ?propiedad ?clase WHERE {
        {?individual rdf:type ns:Person}
        UNION
        {?individual rdf:type ns:Animal}
        ?individual ?propiedad ?valor.
        ?individual rdf:type ?clase
    }
    """, initNs={"rdf": RDF, "ns": ns}
)
# Visualize the results
for r in g.query(q3):
    print(r)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

q4 = prepareQuery(
    """
    SELECT ?nombre WHERE {
        {?individual a/rdfs:subClassOf* ns:Person.}
        UNION
        {?individual rdf:type ?type.
        ?type rdf:type ns:person.}
        ?individual foaf:knows ?rocky.
        ?rocky vcard:FN ?nombreRocky.
        FILTER(contains(?nombreRocky, "Rocky"))
        ?individual vcard:Given ?nombre.
    }
    """, initNs={"rdfs": RDFS, "ns": ns,"rdf": RDF, "vcard":vcard, "foaf":FOAF}
)
# Visualize the results
for r in g.query(q4):
    print(r.nombre)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5 = prepareQuery("""
    SELECT ?entity
    WHERE {
        ?entity foaf:knows ?p1.
        ?entity foaf:knows ?2.
        FILTER (?p1 != ?2)
    }
    GROUP BY ?entity
    HAVING (COUNT(?p1) > 1)""", initNs={"foaf":FOAF}
)
# Visualize the results
for r in g.query(q5):
    print(r)
