# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hSngd1VeIv2Z9WkQU6apsnESwwlnynsX

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal, FOAF
from rdflib.namespace import RDF, RDFS
from rdflib.plugins.sparql import prepareQuery
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

NS = Namespace("http://somewhere#")

q1 = prepareQuery('''
  SELECT ?subclass
  WHERE
  {
    ?subclass rdfs:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "rdfs":RDFS, "ns":NS}
)

# Visualize the results
for r in g.query(q1):
  print(r.subclass)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

q2 = prepareQuery('''
    SELECT ?individual
    WHERE
    {
        ?individual rdf:type/rdfs:subClassOf* ns:Person.
    }
    ''',
    initNs={"rdf": RDF,"rdfs": RDFS, "ns": NS}
)
# Visualize the results
for r in g.query(q2):
  print(r.individual)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

q3 = prepareQuery(
    '''
    SELECT ?individual ?Property ?Value ?Class
    WHERE
    {
        ?individual rdf:type ?Class.
        ?individual ?Property ?Value
        FILTER(?Class = ns:Person || ?Class = ns:Animal)
    }
    ''',
    initNs={"rdf": RDF, "ns": NS}
)
# Visualize the results
for r in g.query(q3):
    print(r.individual, r.Class, r.Property, r.Value)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

q4 = prepareQuery('''
    SELECT DISTINCT ?person
    WHERE
    {
        {
          ?person foaf:knows ns:RockySmith .
        }
    }
    ''',
    initNs = { 'ns': NS, 'foaf': FOAF }
)
# Visualize the results
for r in g.query(q4):
    print(r.person)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

q5= prepareQuery('''
  SELECT ?entity  WHERE
  {
    ?entity foaf:knows ?persons.
    FILTER(?entity != ?persons).
  }
  GROUP BY ?entity
  HAVING (COUNT(DISTINCT ?persons) >= 2)
  ''',
  initNs = {"foaf":FOAF}
)
# Visualize the results
for r in g.query(q5):
  print(r.entity)