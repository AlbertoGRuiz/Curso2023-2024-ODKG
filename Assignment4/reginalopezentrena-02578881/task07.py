# -*- coding: utf-8 -*-
"""Task07.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hk_jENDVvQOpQgHS4TcBxjnFpUQ2lhUI

**Task 07: Querying RDF(s)**
"""

!pip install rdflib
github_storage = "https://raw.githubusercontent.com/FacultadInformatica-LinkedData/Curso2023-2024/master/Assignment4/course_materials"

"""First let's read the RDF file"""

from rdflib import Graph, Namespace, Literal
from rdflib.namespace import RDF, RDFS
g = Graph()
g.namespace_manager.bind('ns', Namespace("http://somewhere#"), override=False)
g.namespace_manager.bind('vcard', Namespace("http://www.w3.org/2001/vcard-rdf/3.0#"), override=False)
g.parse(github_storage+"/rdf/example6.rdf", format="xml")

"""**TASK 7.1: List all subclasses of "LivingThing" with RDFLib and SPARQL**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

print("sparql query")
q1 = prepareQuery('''
  SELECT ?Subject WHERE {
    ?Subject RDFS:subClassOf ns:LivingThing.
  }
  ''',
  initNs = { "RDFS": RDFS, "ns":ns}
)

# Visualize the results
for r in g.query(q1):
  print(r.Subject)

print("RDFLIB")
for s, p, o in g.triples((None, RDFS.subClassOf, ns.LivingThing)):
  print(s)

"""**TASK 7.2: List all individuals of "Person" with RDFLib and SPARQL (remember the subClasses)**

"""

# TO DO
from rdflib.plugins.sparql import prepareQuery
ns = Namespace("http://somewhere#")

print("sparql query")
q2 = prepareQuery('''
   SELECT  ?Subject ?Individual  WHERE {
    ?Subject RDFS:subClassOf* ns:Person.
  ?Individual RDF:type ?Subject.
  }
  ''',
  initNs = { "RDFS": RDFS,
            "RDF": RDF,
             "ns":ns}
)
#Visualize the results

for r in g.query(q2):
  print(r.Individual)

print("RDFLIB")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  print(s)

for s1, p1, o1 in g.triples((None, RDFS.subClassOf, ns.Person)):
  for s2, p2, o2 in g.triples((None, RDF.type, s1)):
    print(s2)

"""**TASK 7.3: List all individuals of "Person" or "Animal" and all their properties including their class with RDFLib and SPARQL. You do not need to list the individuals of the subclasses of person**

"""

# TO DO
print("Sparql query")
q3 = prepareQuery('''
  SELECT  ?Individual ?Property WHERE {
    ?Individual ?Property ?value
    {
    ?Subject RDFS:subClassOf ns:Person.
  ?Individual RDF:type ?Subject.
  }  UNION
  {
    ?Subject RDFS:subClassOf* ns:Animal.
  ?Individual RDF:type ?Subject.
  }}
  ''',
  initNs = { "RDFS": RDFS,
            "RDF": RDF,
             "ns":ns}
)

#Visualize the results
for r in g.query(q3):
  print(r.Individual, r.Property)

print("RDFLIB")
for s, p, o in g.triples((None, RDF.type, ns.Person)):
  for s1, p1, o1 in g.triples((s, None, None)):
    print(s1, p1)
for s2, p2, o2 in g.triples((None, RDF.type, ns.Animal)):
  for s3, p3, o3 in g.triples((s2, None, None)):
    print(s3, p3)

"""**TASK 7.4:  List the name of the persons who know Rocky**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0/")

q4 = prepareQuery('''
  SELECT ?Subject ?Name WHERE {
    ?Subject FOAF:knows ?RockySmith.
    ?Subject vcard:Given ?Name.
  }
  ''',
  initNs = { "FOAF": FOAF, "vcard": vcard}
)
#Visualize the results
for r in g.query(q4):
  print(r.Name)

for s, p, o in g.triples((None, FOAF.knows, ns.RockySmith)):
  for s1, p1, o1 in g.triples((None, vcard.Given, s)):
    print(s1)

"""**Task 7.5: List the entities who know at least two other entities in the graph**"""

# TO DO
from rdflib.plugins.sparql import prepareQuery

FOAF = Namespace("http://xmlns.com/foaf/0.1/")
ns = Namespace("http://somewhere#")
vcard = Namespace("http://www.w3.org/2001/vcard-rdf/3.0#")
FOAF = Namespace("http://xmlns.com/foaf/0.1/")

q5 = prepareQuery('''
   SELECT ?Subject (COUNT(?known) AS ?count)
  WHERE {
  ?Subject foaf:knows ?known.
  }
  GROUP BY ?Subject
  HAVING (COUNT(?known) >= 2)
  ''',
  initNs = {"foaf":FOAF}
)

#Visualize the results
for r in g.query(q5):
  print(r.Subject)